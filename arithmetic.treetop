grammar Arithmetic  
  rule arithmetic_expression
    comparative / additive
  end
  
  rule comparative
    operand_1:additive space operator:comparison_op space operand_2:additive <BinaryOperation>
  end
  
  rule comparison_op
    equality_op / inequality_op
  end
  
  rule equality_op
    '=' {
      def apply(a, b)
        a == b
      end
    }
  end
  
  rule inequality_op
    '!=' {
      def apply(a, b)
        a != b
      end
    }
  end
  
  rule additive
    operand_1:multitive
    space operator:additive_op space
    operand_2:additive <BinaryOperation>
    /
    multitive
  end
  
  rule additive_op
    '+' {
      def apply(a, b)
        a + b
      end
    }
    /
    '-' {
      def apply(a, b)
        a - b
      end
    }
  end

  rule multitive
    operand_1:primary
    space operator:multitive_op space
    operand_2:multitive <BinaryOperation>
    /
    primary
  end
  
  rule multitive_op
    '*' {
      def apply(a, b)
        a * b
      end
    }
    /
    '/' {
      def apply(a, b)
        a / b
      end
    }
  end  
  
  rule primary
    number
    /
    '(' space arithmetic_expression space ')' {
      def eval(env={})
        arithmetic_expression.eval(env)
      end
    }
  end

  rule number
    ([1-9] [0-9]* / '0') {
      def eval(env={})
        text_value.to_i
      end
    }
  end
  
  rule space
    ' '*
  end
end