grammar SimpleSem
  include Arithmetic
  
  rule statement
    set_stmt / jump_stmt / jumpt_stmt / halt
  end
  
  rule halt
    'halt' {
      def execute(env={})
        raise ProgramHalt
      end
    }
  end
  
  rule set_stmt
    set_stmt_assign / set_stmt_write / set_stmt_read
  end

  rule set_stmt_assign
    'set' space location:primary comma value:primary {
      def execute(env)
        env.data[location.eval(env)] = value.eval(env)
      end
    }
  end
  
  rule set_stmt_write
    'set' space 'write' comma expression {
      def execute(env)
        puts expression.eval(env)
      end
    }
  end
  
  rule set_stmt_read
    'set' space expression comma 'read' {
      def execute(env)
        print "input: "
        env.data[expression.eval(env)] = $stdin.gets.strip.to_i
      end  
    }
  end
  
  rule jump_stmt
    'jump' space loc:expression {
      def execute(env)
        env.pc = loc.eval(env)
      end
    }
  end
  
  rule jumpt_stmt
    'jumpt' space loc:expression comma comparative {
      def execute(env)
        if comparative.eval(env)
          env.pc = loc.eval(env)
        end
      end
    }
  end
  
  rule expression
    ip / data_lookup / number
  end
  
  rule primary
    arithmetic_expression
    /
    ip
    /
    data_lookup
    /
    number
  end
  
  rule data_lookup
    'D[' primary ']' {
      def eval(env)
        env.data[primary.eval(env)]
      end
    }
  end
  
  rule ip
    'ip' {
      def eval(env)
        env.pc
      end
    }
  end
  
  rule comma
    space ',' space
  end
  
end